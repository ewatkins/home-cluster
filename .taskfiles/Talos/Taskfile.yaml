---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

x-env-vars: &env-vars
  TALOS_VERSION:
    sh: yq 'select(document_index == 1).spec.postBuild.substitute.TALOS_VERSION' {{.KUBERNETES_DIR}}/apps/system-upgrade/system-upgrade-controller/ks.yaml
  TALOS_SCHEMATIC_ID:
    sh: yq 'select(document_index == 1).spec.postBuild.substitute.TALOS_SCHEMATIC_ID' {{.KUBERNETES_DIR}}/apps/system-upgrade/system-upgrade-controller/ks.yaml
  KUBERNETES_VERSION:
    sh: yq 'select(document_index == 1).spec.postBuild.substitute.KUBERNETES_VERSION' {{.KUBERNETES_DIR}}/apps/system-upgrade/system-upgrade-controller/ks.yaml

tasks:
  bootstrap:
    desc: Bootstrap Talos
    prompt: Bootstrap Talos on cluster ... continue?
    cmds:
      - task: bootstrap-etcd
      - task: fetch-kubeconfig
      - task: bootstrap-apps

  bootstrap-etcd:
    desc: Bootstrap Etcd
    cmd: until talosctl --nodes {{.controller}} bootstrap; do sleep 10; done
    vars:
      controller:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[0]'
    preconditions:
      - test -f talosconfig
      - talosctl config info >/dev/null 2>&1

  bootstrap-apps:
    desc: Bootstrap core apps needed for Talos
    cmds:
      - until kubectl wait --for=condition=Ready=False nodes --all --timeout=10m; do sleep 10; done
      - helmfile --quiet --file {{.KUBERNETES_DIR}}/bootstrap/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl wait --for=condition=Ready nodes --all --timeout=10m; do sleep 10; done
    preconditions:
      - test -f talosconfig
      - talosctl config info >/dev/null 2>&1
      - test -f {{.KUBERNETES_DIR}}/bootstrap/helmfile.yaml

  fetch-kubeconfig:
    desc: Fetch kubeconfig from Talos controllers
    cmd: |
      talosctl kubeconfig --nodes {{.controller}} --force .
    vars:
      controller:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[0]'
    preconditions:
      - test -f talosconfig
      - talosctl config info >/dev/null 2>&1

  apply-config:
    desc: Apply Talos configuration to a node
    cmd: |
      sops -d {{.KUBERNETES_DIR}}/bootstrap/talos/great-lakes/{{.hostname}}.secret.sops.yaml | \
          envsubst | \
              talosctl apply-config --mode={{.mode}} --nodes {{.node}} --file /dev/stdin
    env: *env-vars
    vars:
      mode: '{{.mode | default "no-reboot"}}'
      hostname:
        sh: talosctl --nodes {{.node}} get machineconfig -o jsonpath='{.spec.machine.network.hostname}'
    requires:
      vars: ["node"]
    preconditions:
      - test -f talosconfig
      - test -f {{.KUBERNETES_DIR}}/bootstrap/talos/great-lakes/{{.hostname}}.secret.sops.yaml
      - talosctl --nodes {{.node}} get machineconfig >/dev/null 2>&1

  upgrade:
    desc: Upgrade Talos on a node
    cmds:
      - until kubectl wait --timeout=5m --for=condition=Complete jobs --all --all-namespaces; do sleep 10; done
      - talosctl --nodes {{.node}} upgrade --image="factory.talos.dev/installer/{{.TALOS_SCHEMATIC_ID}}:{{.TALOS_VERSION}}" --wait=true --timeout=10m --preserve=true
      - talosctl --nodes {{.node}} health --wait-timeout=10m --server=false
      # - until kubectl wait --timeout=5m --for=jsonpath=.status.ceph.health=HEALTH_OK cephcluster --all --all-namespaces; do sleep 10; done
    vars: *env-vars
    requires:
      vars: ["node"]
    preconditions:
      - test -f talosconfig
      - talosctl config info >/dev/null 2>&1
      - talosctl --nodes {{.node}} get machineconfig >/dev/null 2>&1

  upgrade-k8s:
    desc: Upgrade the clusters k8s version
    cmd: talosctl --nodes {{.controller}} upgrade-k8s --to {{.KUBERNETES_VERSION}}
    vars:
      controller:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[0]'
    preconditions:
      - test -f talosconfig
      - talosctl config info >/dev/null 2>&1
      - talosctl --nodes {{.node}} get machineconfig >/dev/null 2>&1

  reset-node:
    desc: Reset a Talos node and shut it down
    prompt: Reset Talos '{{.node}}' node on the cluster ... continue?
    cmd: talosctl reset --nodes {{.node}} --graceful=false
    requires:
      vars: ["node"]
    preconditions:
      - test -f talosconfig
      - talosctl config info >/dev/null 2>&1
      - talosctl --nodes {{.node}} get machineconfig >/dev/null 2>&1

  reset-cluster:
    desc: Reset all the Talos nodes and shut 'em down
    prompt: Reset Talos on the cluster ... continue?
    cmd: talosctl reset --nodes {{.nodes}} --graceful=false
    vars:
      nodes:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(",")'
    preconditions:
      - test -f talosconfig
      - talosctl config info >/dev/null 2>&1
      - talosctl --nodes {{.nodes}} get machineconfig >/dev/null 2>&1
